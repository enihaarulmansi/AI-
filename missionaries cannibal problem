from collections import deque

def is_valid(m, c):
    return (m == 0 or m >= c) and (3 - m == 0 or 3 - m >= 3 - c)

def get_next_states(state):
    m_left, c_left, boat = state
    next_states = []
    if boat == 'left':
        for m in range(0, 3):
            for c in range(0, 3):
                if 0 < m + c <= 2:
                    new_state = (m_left - m, c_left - c, 'right')
                    if is_valid(*new_state):
                        next_states.append(new_state)
    else:
        for m in range(0, 3):
            for c in range(0, 3):
                if 0 < m + c <= 2:
                    new_state = (m_left + m, c_left + c, 'left')
                    if is_valid(*new_state):
                        next_states.append(new_state)
    return next_states

def bfs():
    initial_state = (3, 3, 'left')
    queue = deque([initial_state])
    visited = set()
    while queue:
        state = queue.popleft()
        if state == (0, 0, 'right'):
            return True
        visited.add(state)
        for next_state in get_next_states(state):
            if next_state not in visited:
                queue.append(next_state)
    return False

if __name__ == "__main__":
    if bfs():
        print("Solution found!")
    else:
        print("No solution exists.")
